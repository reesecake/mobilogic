package org.ecs160.a2;

import static com.codename1.ui.CN.*;
import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Display;
import com.codename1.ui.FontImage;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.util.UITimer;
import java.io.IOException;
import com.codename1.ui.Toolbar;
import com.codename1.io.NetworkEvent;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose
 * of building native mobile applications using Java.
 */
public class AppMain {

    private Form current;
    public static Resources theme;
    private CanvasContainer canvasContainer;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if(current != null){
            current.show();
            return;
        }

        Form main = new Form("MobiLogic", BoxLayout.y());
        main.setScrollableY(false);
        canvasContainer = new CanvasContainer();
        main.add(canvasContainer);

        Button clear = new Button("Clear");
        Button delete = new Button("Delete");
        clear.addActionListener((evt -> canvasContainer.clearCanvas()));
        // TODO make delete do something
        delete.addActionListener((evt -> {}));

        SelectorPanel selectorPanel = new SelectorPanel(clear, delete);
        selectorPanel.setSafeArea(true);
        main.add(selectorPanel);
        main.show();

        // from compenent_struct merge:
        // DEBUG - Circuit
        Circuit mainCircuit = new Circuit();
        /* temporary design
        <off/off>==1_____3_____
        <on/off>==2____/
         */
        LogicComponent gate1 = new LogicComponent(2);
        LogicComponent gate2 = new LogicComponent(2);
        LogicComponent gate3 = new LogicComponent(2);
        gate1.name = "GATE1";
        gate2.name = "GATE2";
        gate3.name = "GATE3";

        // Add Three Standalone Gates
        mainCircuit.AddComponent(gate1);
        mainCircuit.AddComponent(gate2);
        mainCircuit.AddComponent(gate3);
        // Connect Gate 1 to Gate 3
        gate1.ConnectToGate(gate3,0);
        mainCircuit.SetComponent(gate1);
        mainCircuit.SetComponent(gate3);

        //Update Circuit
        mainCircuit.Update();

        // Toggle Gate2 Input
        // Connect Gate 2 to Gate 3
        gate2.SetInput(0,true);
        gate2.ConnectToGate(gate3,1);
        mainCircuit.SetComponent(gate2);
        mainCircuit.SetComponent(gate3);
        //Update Circuit
        mainCircuit.Update();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}
